AWSTemplateFormatVersion: '2010-09-09'
Description: Tagetik Data Loader

Parameters:

  s3databucketname:
    Type: String
    Description: S3 Bucket name for data transfer. Will be created inside the stack. Note, has to be unique across all accounts!
    Default: tagetik-dataload-bucket

  s3repositorybucketname:
    Type: String
    Description: S3 Bucket name for installation files. Must exist, and have the installation zip (TagetikDataLoader6.0.1_ApacheKaraf4.4.0.zip) inside, at root!
    Default: tagetik-repository-bucket

  toggle:
    Type: String
    Description: Switch to opposite value to force instance recreation
    AllowedValues:
      - true
      - false
    Default: true

  elasticipid:
    Type: String
    Description: Use existing elastic IP allocation ID. Leave empty to create a new one

  elasticipaddress:
    Type: String
    Description: Used with elasticipid parameter

  vpcid:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID, where the instance will be installed.

  subnetid:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet ID, where the instance will be installed. Has to be inside the VPC of earlier parameter!

  ec2keyname:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Keyname for ec2 instance

  ipaddress:
    Type: String
    Description: Your IP, used for firewall opening for ssh connection. Optional!

  connectionpassword:
    Type: String
    Description: Secrets Manager location of connection the password.
    Default: lab/tagetik/connectionpassword

  tagetiksaasaddress:
    Type: String
    Description: Web address of Tagetik SAAS. Remember to specify the environment after the initial address!
    Default: company.saastagetik.com/dev

  usehttps:
    Type: String
    Description: Enable https encryption? If true, requires the parameters truststorename, truststorepassword, certificatename and certificatepassword
    AllowedValues:
      - true
      - false
    Default: true

  truststorename:
    Type: String
    Description: Truststore name, used with HTTPS settings. Should be located at the root of s3repositorybucketname
    Default: saastagetik.truststore
  
  truststorepassword:
    Type: String
    Description: Secrets Manager location of the keystore password. Has to be created manually before creating the stack!
    Default: lab/tagetik/keystorepassword

  certificatename:
    Type: String
    Description: Certificate name, used with HTTPS settings. Should be located at the root of s3repositorybucketname
    Default: web_certificate.p12

  certificatepassword:
    Type: String
    Description: Secrets Manager location of the certificate password. Has to be created manually before creating the stack!
    Default: lab/tagetik/certificatepassword

  connectionpassword:
    Type: String
    Description: Secrets Manager location of the connection password. Has to be created manually before creating the stack!
    Default: lab/tagetik/connectionpassword

  createcloudwatchmonitoring:
    Type: String
    Description: Enable CloudWatch monitoring and alarms? Alarms will cover CPU, Disk Usage and RAM
    AllowedValues:
      - true
      - false
    Default: false

Conditions:
  Usehttps: !Equals [!Ref usehttps, "true"]
  Newelasticip: !Equals [!Ref elasticipid, ""]
  Existingelasticip: !Not [Condition: Newelasticip]
  AddSGRuleforSSH: !Not [!Equals [!Ref ipaddress, ""]]
  CreateCloudWatchMonitoring: !Equals [!Ref createcloudwatchmonitoring, "true"]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "S3 buckets"
        Parameters:
          - s3databucketname
          - s3repositorybucketname
      -
        Label:
          default: "EC2 Instance and Networking"
        Parameters:
          - vpcid
          - subnetid
          - ec2keyname
          - ipaddress
          - toggle
          - createcloudwatchmonitoring
      -
        Label:
          default: "Elastic IP"
        Parameters:
          - elasticipid
          - elasticipaddress
      -
        Label:
          default: "Encryption"
        Parameters:
          - usehttps
          - truststorename
          - truststorepassword
          - certificatename
          - certificatepassword
          - connectionpassword

Resources:

  instance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref launchtemplate
        Version: !GetAtt launchtemplate.LatestVersionNumber
      SubnetId: !Ref subnetid
      IamInstanceProfile: !Ref EC2instanceprofile
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  launchtemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        SecurityGroupIds:
          - !Ref ec2sg
        ImageId: ami-0ea0f26a6d50850c5 # Amazon linux 2
        InstanceType: t3.micro
        KeyName: !Ref ec2keyname
        BlockDeviceMappings:
          - DeviceName: "/dev/xvda"
            Ebs:
              VolumeSize: 50
        UserData:
          "Fn::Base64":
            !Sub |
              #!/bin/bash
              echo ${toggle}
              sudo yum -y update
              systemctl start amazon-ssm-agent
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource launchtemplate --configsets onlyonce --region ${AWS::Region}

    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          onlyonce:
            - installdataloader
            - cloudwatchagent

        installdataloader:
          commands:
            1_install_s3fs:
              command: !Sub |
                # Install required dependencies for s3fs
                yum install -y gcc libstdc++-devel gcc-c++ fuse fuse-devel curl-devel libxml2-devel mailcap automake openssl-devel git wget
                # Install latest version of s3fs
                git clone https://github.com/s3fs-fuse/s3fs-fuse
                cd s3fs-fuse/
                ./autogen.sh
                ./configure --prefix=/usr --with-openssl
                make
                make install

                # Mount the s3 bucket to instance root
                mkdir /${s3databucketname}
                s3fs ${s3databucketname} /${s3databucketname}/ -o iam_role=auto,nonempty

            2_install_java:
              command: !Sub |
                # Install supported version of Amazon Corretto inside /var
                cd /var/
                wget https://corretto.aws/downloads/resources/11.0.15.9.1/amazon-corretto-11.0.15.9.1-linux-x64.tar.gz
                tar -xf amazon-corretto-11.0.15.9.1-linux-x64.tar.gz
            3_install_dataloader:
              command: !Sub |
                # Create folder for temp files
                mkdir -p /TagetikDataLoader/dev/temp
                # Download the installation file from S3 and unzip it
                aws s3 cp s3://${s3repositorybucketname}/TagetikDataLoader6.0.1_ApacheKaraf4.4.0.zip /TagetikDataLoader/dev/
                unzip -a /TagetikDataLoader/dev/TagetikDataLoader6.0.1_ApacheKaraf4.4.0.zip -d /TagetikDataLoader/dev/

            4_install_certificates_and_set_passwords:
              command:
                !If
                - Usehttps
                - !Sub |
                  # Create folders for temp files and certificates
                  mkdir -p /TagetikDataLoader/dev/certificates
                  # Add Certificates
                  aws s3 cp s3://${s3repositorybucketname}/${truststorename} /TagetikDataLoader/dev/certificates
                  aws s3 cp s3://${s3repositorybucketname}/${certificatename} /TagetikDataLoader/dev/certificates

                  # Get passwords from secrets manager
                  yum install -y jq
                  TRUSTSTOREPASSWORD=$(aws secretsmanager get-secret-value --secret-id ${truststorepassword} --query SecretString --region ${AWS::Region} --output text | jq -r .tagetikkeystorepassword)
                  CERTIFICATEPASSWORD=$(aws secretsmanager get-secret-value --secret-id ${certificatepassword} --query SecretString --region ${AWS::Region} --output text | jq -r .tagetikcertificatepassword)

                  # Set Certificate and trust store password
                  sed -i 's/tgk.server.ks.path=<path to server certificate keystore>/tgk.server.ks.path=\/TagetikDataLoader\/dev\/certificates\/${truststorename}/g' /TagetikDataLoader/dev/TagetikDataLoader6.0.1_ApacheKaraf4.4.0/tgk-configuration-4.4.0/tgk.properties.cfg
                  sed -i 's/tgk.server.ks.password=<server certificate password>/tgk.server.ks.password={TGK_ENCRYPT}$TRUSTSTOREPASSWORD{TGK_ENCRYPT}/g' /TagetikDataLoader/dev/TagetikDataLoader6.0.1_ApacheKaraf4.4.0/tgk-configuration-4.4.0/tgk.properties.cfg
                  sed -i 's/tgk.client.ks.path=<path to client certificate keystore>/tgk.client.ks.path=\/TagetikDataLoader\/dev\/certificates\/${certificatename}/g' /TagetikDataLoader/dev/TagetikDataLoader6.0.1_ApacheKaraf4.4.0/tgk-configuration-4.4.0/tgk.properties.cfg
                  sed -i 's/tgk.client.ks.password=<client certificate password>/tgk.client.ks.password={TGK_ENCRYPT}$CERTIFICATEPASSWORD{TGK_ENCRYPT}/g' /TagetikDataLoader/dev/TagetikDataLoader6.0.1_ApacheKaraf4.4.0/tgk-configuration-4.4.0/tgk.properties.cfg
                  sed -i 's/#tgk.agent.tmpfolder=/tgk.agent.tmpfolder=\/TagetikDataLoader\/dev\/temp/g' /TagetikDataLoader/dev/TagetikDataLoader6.0.1_ApacheKaraf4.4.0/tgk-configuration-4.4.0/tgk.properties.cfg

                - ''
            5_set_settings:
              command: !Sub |
                # Set Java and Karaf settings
                echo "export JAVA_HOME=\"/var/amazon-corretto-11.0.15.9.1-linux-x64\"" >> /TagetikDataLoader/dev/TagetikDataLoader6.0.1_ApacheKaraf4.4.0/apache-karaf-4.4.0/bin/setenv
                echo "export JAVA_MIN_MEM=256M" >> /TagetikDataLoader/dev/TagetikDataLoader6.0.1_ApacheKaraf4.4.0/apache-karaf-4.4.0/bin/setenv
                echo "export JAVA_MAX_MEM=256M" >> /TagetikDataLoader/dev/TagetikDataLoader6.0.1_ApacheKaraf4.4.0/apache-karaf-4.4.0/bin/setenv
                echo "export JAVA_PERM_MEM=128M" >> /TagetikDataLoader/dev/TagetikDataLoader6.0.1_ApacheKaraf4.4.0/apache-karaf-4.4.0/bin/setenv
                echo "export JAVA_MAX_PERM_MEM=128M" >> /TagetikDataLoader/dev/TagetikDataLoader6.0.1_ApacheKaraf4.4.0/apache-karaf-4.4.0/bin/setenv
                echo "export KARAF_ETC=/TagetikDataLoader/dev/tgk-configuration/" >> /TagetikDataLoader/dev/TagetikDataLoader6.0.1_ApacheKaraf4.4.0/apache-karaf-4.4.0/bin/setenv

                # Set path
                echo "${s3databucketname}=/${s3databucketname}" >> /TagetikDataLoader/dev/TagetikDataLoader6.0.1_ApacheKaraf4.4.0/tgk-configuration-4.4.0/tgk.repository.cfg

                # Set password
                CONNECTIONPASSWORD=$(aws secretsmanager get-secret-value --secret-id ${connectionpassword} --query SecretString --region ${AWS::Region} --output text | jq -r .tagetikconnectionpassword)
                sed -i "s/tgk.agent.secret =/tgk.agent.secret = {TGK_ENCRYPT}$CONNECTIONPASSWORD{TGK_ENCRYPT}/g" /TagetikDataLoader/dev/TagetikDataLoader6.0.1_ApacheKaraf4.4.0/tgk-configuration-4.4.0/tgk.agent.cfg


                # Set settings
                sed -i 's|tgk.endpoint.address=<tagetik url>|tgk.endpoint.address=https://${tagetiksaasaddress}/dev|g' /TagetikDataLoader/dev/TagetikDataLoader6.0.1_ApacheKaraf4.4.0/tgk-configuration-4.4.0/tgk.properties.cfg

                # Fix folder structure
                mv /TagetikDataLoader/dev/TagetikDataLoader6.0.1_ApacheKaraf4.4.0/tgk-configuration-4.4.0/ /TagetikDataLoader/dev/tgk-configuration
                mv /TagetikDataLoader/dev/TagetikDataLoader6.0.1_ApacheKaraf4.4.0/apache-karaf-4.4.0/ /TagetikDataLoader/dev/apache-karaf

                # Start karaf - commented lines has to be ran manually!
                chmod +x /TagetikDataLoader/dev/apache-karaf/bin/karaf
                # /TagetikDataLoader/dev/apache-karaf/bin/karaf
                # wrapper:install --name "TDL" --display "TDL" --description "TDL"
                # logout

                # # Enable and start Tagetik Data Loader Service
                # systemctl enable /TagetikDataLoader/dev/apache-karaf/bin/TDL.service
                # systemctl start TDL

        cloudwatchagent:
          cwd: '/opt/cfn-work-dir/'
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Join
                - ''
                - - !Sub |
                    {
                      "logs": {
                          "metrics_collected": {
                            "emf": { }
                          },
                          "logs_collected": {
                          "files": {
                            "collect_list": [
                              {
                                "file_path": "/var/log/cfn-init.log",
                                "log_group_name": "/tdl/${AWS::StackName}/cfn-init.log",
                                "log_stream_name": "{instance_id}"
                              },
                              {
                                "file_path": "/var/log/amazon/ssm/amazon-ssm-agent.log",
                                "log_group_name": "/tdl/${AWS::StackName}/ssm-amazon-ssm-agent.log",
                                "log_stream_name": "{instance_id}"
                              },
                              {
                                "file_path": "/var/log/amazon/ssm/errors.log",
                                "log_group_name": "/tdl/${AWS::StackName}/ssm-errors.log",
                                "log_stream_name": "{instance_id}"
                              },
                              {
                                "file_path": "/var/log/messages",
                                "log_group_name": "/tdl/${AWS::StackName}/messages",
                                "log_stream_name": "{instance_id}"
                              },
                              {
                                "file_path": "/var/log/secure",
                                "log_group_name": "/tdl/${AWS::StackName}/secure",
                                "log_stream_name": "{instance_id}"
                              }
                          ]
                          }
                          }
                  - !If
                    - CreateCloudWatchMonitoring
                    - !Sub |
                          },
                          "metrics": {
                            "namespace": "${AWS::StackName}",
                            "append_dimensions": {
                              "InstanceId": "${!aws:InstanceId}"
                            },
                            "metrics_collected": {
                              "cpu": {
                                "measurement": [
                                  "cpu_usage_active"
                                ],
                                "metrics_collection_interval": 60
                              },
                              "disk": {
                                "measurement": [
                                  "used_percent"
                                ],
                                "metrics_collection_interval": 500,
                                "resources": [
                                  "/"
                                ]
                              },
                              "mem": {
                                "measurement": [
                                  "mem_used_percent"
                                ],
                                "metrics_collection_interval": 60
                              },
                              "procstat": [
                                {
                                  "pattern": "amazon-cloudwatch-agent",
                                  "measurement": [
                                    "cpu_usage",
                                    "memory_rss"
                                  ]
                                }
                              ]
                            }
                          }
                          }
                    - |
                          }
                          }
          commands:
            01_stop_service:
              command: yum install amazon-cloudwatch-agent -y
            02_start_service:
              command: |
                service amazon-cloudwatch-agent start
                systemctl enable amazon-cloudwatch-agent
                /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
            03_create_memory_cpu_alarm:
              command: 
                !If 
                - CreateCloudWatchMonitoring
                - !Sub |
                      instanceid=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                      aws cloudwatch put-metric-alarm --alarm-name ${AWS::StackName}-memory-alarm-$instanceid --evaluation-periods 1 --comparison-operator GreaterThanThreshold --alarm-actions ${EscalationTopic} --metric-name mem_used_percent --period 60 --namespace ${AWS::StackName} --statistic Average --threshold 70 --dimensions Name=InstanceId,Value=$instanceid --region ${AWS::Region}
                      aws cloudwatch put-metric-alarm --alarm-name ${AWS::StackName}-cpu-alarm-$instanceid --evaluation-periods 2 --comparison-operator GreaterThanThreshold --alarm-actions ${EscalationTopic} --metric-name cpu_usage_active --period 60 --namespace ${AWS::StackName} --statistic Average --threshold 80 --dimensions Name=InstanceId,Value=$instanceid Name=cpu,Value=cpu-total --region ${AWS::Region}
                      aws cloudwatch put-metric-alarm --alarm-name ${AWS::StackName}-disk-alarm-$instanceid --evaluation-periods 1 --comparison-operator GreaterThanThreshold --alarm-actions ${EscalationTopic} --metric-name disk_used_percent --period 60 --namespace ${AWS::StackName} --statistic Average --threshold 70 --dimensions Name=InstanceId,Value=$instanceid Name=path,Value="/" Name=device,Value=nvme0n1p1 Name=fstype,Value=xfs --region ${AWS::Region}
                - !Sub |
                    echo 'No alarms for instance created'
  ec2sg:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "TDL EC2 SG"
      VpcId: !Ref vpcid
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          ToPort: -1
          IpProtocol: '-1'

  ec2sgrule:
    Type: "AWS::EC2::SecurityGroupIngress"
    Condition: AddSGRuleforSSH
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp:  !Join ['', [!Ref ipaddress, '/32']]
      Description: Ip from ipaddress parameter
      GroupId: !GetAtt ec2sg.GroupId


  # EC2 instance profile
  ec2role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  dataloadbucketpolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: ['s3:*']
            Resource:
              - Fn::Join:
                  - ''
                  -
                    - 'arn:aws:s3:::'
                    - !Ref 'dataloadbucket'
              - Fn::Join:
                  - ''
                  -
                    - 'arn:aws:s3:::'
                    - !Ref 'dataloadbucket'
                    - '/*'
      Roles:
        -
          Ref: "ec2role"

  datarepositorypolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: ['s3:Get*', 's3:List*']
            Resource:
              - Fn::Join:
                  - ''
                  -
                    - 'arn:aws:s3:::'
                    - !Ref 's3repositorybucketname'
                    - '/*'
      Roles:
        -
          Ref: "ec2role"


  cloudwatchpolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
            - cloudwatch:PutMetricData
            - cloudwatch:PutMetricAlarm
          Resource: '*'
      Roles:
        -
          Ref: "ec2role"

  secretsmanagerpolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: ['secretsmanager:GetSecretValue']
            Resource:
              - Fn::Join:
                  - ''
                  -
                    - 'arn:aws:secretsmanager:'
                    - !Ref "AWS::Region"
                    - ':'
                    - !Ref "AWS::AccountId"
                    - ':secret:'
                    - !Ref 'connectionpassword'
                    - '*'
              - Fn::Join:
                  - ''
                  -
                    - 'arn:aws:secretsmanager:'
                    - !Ref "AWS::Region"
                    - ':'
                    - !Ref "AWS::AccountId"
                    - ':secret:'
                    - !Ref 'truststorepassword'
                    - '*'
              - Fn::Join:
                  - ''
                  -
                    - 'arn:aws:secretsmanager:'
                    - !Ref "AWS::Region"
                    - ':'
                    - !Ref "AWS::AccountId"
                    - ':secret:'
                    - !Ref 'certificatepassword'
                    - '*'
      Roles:
        -
          Ref: "ec2role"

  EC2instanceprofile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "ec2role"

  dataloadbucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref s3databucketname
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  elasticip:
    Type: AWS::EC2::EIP
    Condition: Newelasticip
    Properties:
      InstanceId: !Ref instance

  elasticipassociation:
    Type: AWS::EC2::EIPAssociation
    Condition: Existingelasticip
    Properties:
      AllocationId: !Ref elasticipid
      InstanceId: !Ref instance

  EscalationTopic:
    Type: AWS::SNS::Topic

###############################
Outputs:
  dataloadbucket:
    Value: !Ref dataloadbucket
    Description: Dataloadbucket name
    
  EscalationTopic:
    Value: !Ref EscalationTopic
    Description: EscalationTopic name
    